#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// 定義 BLE 相關 UUID
#define SERVICE_UUID        "180F" // 使用標準的電池服務 UUID
#define CHARACTERISTIC_UUID "2A19" // 使用標準的電池等級特性 UUID

const int BUTTON_PIN1 = 14;
const int BUTTON_PIN2 = 12;
const int BUTTON_PIN3 = 13;
int lastPressedButton = 0;

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;

// 連接狀態回調
class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      Serial.println("裝置已連接");
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("裝置已斷開連接");
    }
};

void setup() {
  Serial.begin(9600);
  pinMode(BUTTON_PIN1, INPUT_PULLUP);
  pinMode(BUTTON_PIN2, INPUT_PULLUP);
  pinMode(BUTTON_PIN3, INPUT_PULLUP);
  Serial.println("歌單控制器已啟動 (BLE 模式)");
  
  // 初始化 BLE
  BLEDevice::init("ESP32_MusicSensor_BLE");
  
  // 建立 BLE 服務器
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  
  // 建立 BLE 服務
  BLEService *pService = pServer->createService(SERVICE_UUID);
  
  // 建立 BLE 特性
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );
  
  // 添加描述符
  pCharacteristic->addDescriptor(new BLE2902());
  
  // 啟動服務
  pService->start();
  
  // 啟動廣播
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // iPhone 連接參數
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  
  Serial.println("BLE 已啟動，等待連接...");
}

void loop() {
  bool button1Pressed = !digitalRead(BUTTON_PIN1);
  bool button2Pressed = !digitalRead(BUTTON_PIN2); 
  bool button3Pressed = !digitalRead(BUTTON_PIN3);

  if(button1Pressed && !button2Pressed && !button3Pressed && lastPressedButton != 1) {
    if (deviceConnected) {
      const char* commandStr = "SELECT_MUSIC_1";
      pCharacteristic->setValue((uint8_t*)commandStr, strlen(commandStr));
      pCharacteristic->notify();
    }
    Serial.println("Selecting Music 1");
    lastPressedButton = 1;
    delay(200);
  }
  
  if(button2Pressed && !button1Pressed && !button3Pressed && lastPressedButton != 2) {
    if (deviceConnected) {
      const char* commandStr = "SELECT_MUSIC_2";
      pCharacteristic->setValue((uint8_t*)commandStr, strlen(commandStr));
      pCharacteristic->notify();
    }
    Serial.println("Selecting Music 2");
    lastPressedButton = 2;
    delay(200);
  }
  
  if(button3Pressed && !button1Pressed && !button2Pressed && lastPressedButton != 3) {
    if (deviceConnected) {
      const char* commandStr = "SELECT_MUSIC_3";
      pCharacteristic->setValue((uint8_t*)commandStr, strlen(commandStr));
      pCharacteristic->notify();
    }
    Serial.println("Selecting Music 3");
    lastPressedButton = 3;
    delay(200);
  }

  // 處理重新連接
  if (!deviceConnected && oldDeviceConnected) {
    delay(500); // 等待 BLE 堆疊準備好
    pServer->startAdvertising(); // 重新開始廣播
    Serial.println("開始重新廣播");
    oldDeviceConnected = deviceConnected;
  }
  
  // 處理新連接
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
  }
  
  delay(10);
}